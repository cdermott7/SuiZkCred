#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const crypto = require('crypto');

// Create the wasm directory if it doesn't exist
const wasmDir = path.join(__dirname, 'public', 'zk', 'wasm');
fs.mkdirSync(wasmDir, { recursive: true });

// Create a mock verification key (similar to what would be generated by snarkjs)
const mockVerificationKey = {
  protocol: "groth16",
  curve: "bn128",
  nPublic: 3,
  vk_alpha_1: [
    "20491192805390485299153009773594534940189261866228447918068658471970481763042",
    "9383485363053290200918347156157836566562967994039712273449902621266178545958",
    "1"
  ],
  vk_beta_2: [
    [
      "6375614351688725206403948262868962793625744043794305715222011528459656738731",
      "4252822878758300859123897981450591353533073413197771768651442665752259397132"
    ],
    [
      "10505242626370262277552901082094356697409835680220590971873171140371331206856",
      "21847035105528745403288232691147584728191162732299865338377159692350059136679"
    ],
    [
      "1",
      "0"
    ]
  ],
  vk_gamma_2: [
    [
      "10857046999023057135944570762232829481370756359578518086990519993285655852781",
      "11559732032986387107991004021392285783925812861821192530917403151452391805634"
    ],
    [
      "8495653923123431417604973247489272438418190587263600148770280649306958101930",
      "4082367875863433681332203403145435568316851327593401208105741076214120093531"
    ],
    [
      "1",
      "0"
    ]
  ],
  vk_delta_2: [
    [
      "10857046999023057135944570762232829481370756359578518086990519993285655852781",
      "11559732032986387107991004021392285783925812861821192530917403151452391805634"
    ],
    [
      "8495653923123431417604973247489272438418190587263600148770280649306958101930",
      "4082367875863433681332203403145435568316851327593401208105741076214120093531"
    ],
    [
      "1",
      "0"
    ]
  ],
  vk_alphabeta_12: [
    [
      [
        "2029413683389138792403550203267699914886652579369918744597935982353728511979",
        "21863536102031588789550920883371332647439988146085448456616589196675112535826"
      ],
      [
        "5725364956674284843202055594302709081088516993638875176494572203773580224689",
        "17853452938162065636571624325093911596947539318473106552885487475698548723863"
      ],
      [
        "11332046289478611343111883412855856607789119414239329866183190835030472850821",
        "2078293780110160478633693254287327044619077460090372145001539605584573819148"
      ]
    ],
    [
      [
        "12599857379517512478707233818450662716312811374917932486031859645004958876206",
        "19714946537515781520332224244005556809730452867015454226998153854104276213736"
      ],
      [
        "11303220060393677789340191265573765360254345722770998545411905421078576859196",
        "10623911060016004754909267403859445828390990087013208566055389847723746378089"
      ],
      [
        "12378651936734362969218007357801120630359059610493573590411762682774945650046",
        "20304072324339808125980453584955734611419883686620588102129237909103686089063"
      ]
    ]
  ],
  IC: [
    [
      "10657404200769992123819723938303722026380755905165874391739496303563068555254",
      "13328278803656299308029416557152838638880412080343916699069941460218091970994",
      "1"
    ],
    [
      "15559039303293684533394361747887410988267476373074385989305240390890697040110",
      "13275728257347035832451051488809525427421323310531486466469662777768198745629",
      "1"
    ],
    [
      "13095876249904603809375506678615388686147046459740363795454438033047331369734",
      "2273062265080563877726620199887188595907444235095293949342757371693708809316",
      "1"
    ],
    [
      "8013390691518341887159345652594722123701768059534585053298727557877979873782",
      "13488792149303372273285033135401404016431298973245908865866868266246031455610",
      "1"
    ]
  ]
};

// Save the verification key to the public directory
fs.writeFileSync(
  path.join(wasmDir, 'credential_verification_key.json'), 
  JSON.stringify(mockVerificationKey, null, 2)
);

// Generate a hex version of the verification key for Sui
const vkHex = Buffer.from(JSON.stringify(mockVerificationKey)).toString('hex');
fs.writeFileSync(
  path.join(wasmDir, 'credential_verification_key.hex'), 
  vkHex
);

// Create a dummy WASM directory to simulate the compiled circuit
const wasmJsDir = path.join(wasmDir, 'credential_js');
fs.mkdirSync(wasmJsDir, { recursive: true });

// Create a dummy WASM file - this won't actually be used
// but will prevent errors when the code tries to access the file
fs.writeFileSync(
  path.join(wasmJsDir, 'credential.wasm'),
  Buffer.from([0x00, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00]) // Minimal valid WASM module
);

// Create a dummy zkey file
fs.writeFileSync(
  path.join(wasmDir, 'credential.zkey'),
  crypto.randomBytes(100) // Random data
);

console.log("Mock ZK data generated successfully:");
console.log(`- Verification Key: ${path.join(wasmDir, 'credential_verification_key.json')}`);
console.log(`- Verification Key Hex: ${path.join(wasmDir, 'credential_verification_key.hex')}`);
console.log(`- Mock WASM Circuit: ${path.join(wasmJsDir, 'credential.wasm')}`);
console.log(`- Mock zKey: ${path.join(wasmDir, 'credential.zkey')}`);
console.log("\nTo deploy the verification key to Sui testnet, run:");
console.log(`sui client call --package <PACKAGE_ID> --module credential_verifier --function create_verification_key --args 0x${vkHex} --gas-budget 100000000`);
console.log("\nThen update .env.testnet with:");
console.log("NEXT_PUBLIC_USE_REAL_ZK=true");
console.log("NEXT_PUBLIC_VERIFICATION_KEY_ID=<verification_key_object_id>");